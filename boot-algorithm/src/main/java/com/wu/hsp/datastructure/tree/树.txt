术语：
1)节点
2)根节点
3)父节点
4)子节点
5)叶子节点(没有子节点的节点)
6)节点的权(节点的值)
7)路径(从root节点到该节点的路线)
8)层
9)子树
10)树的高度(最大层数)

二叉树：
    1、每个节点最多只能有两个子节点的一种形式称为二叉树
    2、二叉树的子节点分为左节点和右节点
    3、二叉树的所有叶子节点都在最后一层，并且节点数的总数=2^n-1,n为层数 ，则为满二叉树
    4、二叉树的所有叶子节点都在最后一层或者倒数第二层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，则为完全二叉树

遍历：主要看父节点的输出顺序，
    1、前序遍历：先输出父节点，在遍历左子树和右子树
        1.1、先输出当前节点(初始的时候是root节点)
        1.2、如果左子树不为空，则递归继续前序遍历
        1.3、如果右子树不为空，则递归继续前序遍历

    2、中序遍历：先遍历左子树，在输出父节点，在遍历右子树
        2.1、如果当前节点的左子节点不为空，则递归中序遍历
        2.2、输出当前节点
        2.3、如果当前节点的右子节点不为空，则递归中序遍历

    3、后序遍历：先遍历左子树，在遍历右子树，最后输出父节点
        3.1、如果当前节点的左子节点不为空，则递归后序遍历
        3.2、如果当前节点的右子节点不为空，则递归后序遍历
        3.3、输出当前节点


堆排序<升序使用大顶堆  降序使用小顶堆>
    堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，他的最坏，最好，平均时间复杂度均为O(nlogn)，它不是稳定排序
    堆具有以下性质的完全二叉树:
        每个节点的值都大于或等于其左右孩子节点的值，称为 大顶堆 (没有要求左右孩子节点的值的大小关系)
        每个节点的值都小于或等于其左右孩子节点的值，称为小顶堆


    大顶堆排序思想 ||大顶堆特点 arr[i] >= arr[2*i+1] && arr[i] >= arr[2*i+2]  i对应第几个节点，i从0开始编号
        1、将待排序序列构造成大顶堆
        2、此时，整个序列的最大值就是堆顶的根节点
        3、将其与末尾元素进行交换，此时末尾就是最大值
        4、然后将剩余n-1个元素重新构造一个对，这样会得到n个元素的次小值。如此反复执行，变能得到一个有序序列了

哈弗曼树
    1)给定 n 个权重作为n个 叶子节点，构造一颗二叉树，若该树的 带权路径长度(wpl) 达到最小值，称这样的二叉树为 最优二叉树，也称为 哈佛曼树(HuffmanTree)
    2)哈弗曼树 是带权路径长度最短 的树，权值较大的节点离根较近

    重要概念
    1)路径和路径长度
        在一颗树中，从一个节点往下可以达到的孩子或孙子节点直接的通路，无痕微路径
        通路中分支的数目称为路径长度。若规定根节点的层数为1，则从根节点到第L层节点的路径长度为L-1

    2)节点的权 及 带权路径长度
        若将数中节点赋给一个有着某种含义的数值，则这个数值称为该节点的权
        节点的带权路径长度为：从根节点到该节点直接的路径长度域该节点的权的乘积

    3)树的带权路径长度(WPL)
        规定所有的 叶子节点 的带权路径长度之和 记为WPL(weighted path length) 权值越大的节点离根节点越近的二叉树才是最优二叉树

    4）WPL最小的就是哈夫曼树
